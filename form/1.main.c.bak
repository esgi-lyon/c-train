// Fonction d'entrées et sortie de base comme printf()
#include <stdio.h>
// Librairie apportant diverses opérations possibles notamment celle de l'allocation de mémoire
// Cette librairie fait partie de la bibliothèque standard du C
#include <stdlib.h>
// Pour manipuler les chaînes de caractères
#include <string.h>

/**
 * @brief La fonction main qui sera toujours exéxuté en premier dans un programme C
 *
 * @return int Retourne toujours un signal compris par les machines
 * - 0 pour sortie sans erreur
 * - 1 ou + pour une erreur
 */
int main()
{
	int k, n; // , j : La variable j n'était pas utilisée donc commenté
  // Tableau de pointeur pointant vers un autre pointeur qui a pour valeur un type int
	int** tab; // tab de pointeur,
	k = 4; n = 5; // Affectation de 4 à k et 5 à n

  // J'alloue un espace mémoire pour mon pointeur, je lui donne comme taille
  // k (ici 4) fois la taille maximum en octets d'un pointeur sur un type int
	tab = (int**)malloc(k * sizeof(int*));
  // Je bouble de 0 jusqu'a la valeur de k (4)
	for (int i = 0; i < k; i++)
	{
    // Création d'un espace mémoire d'une taill de n * la taille maximale en octets du type int
    // On affecte cet espace mémoire à une case du tableau de pointeur
    // Par défaut ce pointeur vers un nombre renverra 0 si on ne lui donne pas d'autre valeur après...
		tab[i] = (int*)malloc(n * sizeof(int)); // tab de pointeur
    // On affiche ici :
    // 1 - En premier la valeur de l'itération, qui est un nombre
    // 2 - la valeur de n (nombre)
    // 3 - L'addresse mémoire du tableau de pointeur tab
    // 4 - L'addresse mémoire du champ de tab dans l'itéation courante
    // 5 - Enfin on affiche la valeur du pointeur du champ de tab dans l'itéation courante
		printf("\n\ni %d\t n %d \t tab %p\t tab[i] %p *tab[i] %d \n\n", i,n,tab, tab[i],*tab[i]);

	}
  // On libère la mémoire de tous les pointeurs contenus dans tab
			for (int i = 0; i < k; i++) free(tab[i]);
  // On libère la mémoire du tableau de pointeur tab
	free(tab);
}
